ttests <- replicate(1000, generator(10)) # in order to check tstat distribution, and taking into account that each time we draw a sample we obtain a new random array of numbers, we can take advantage of this and repeat the experiment a large number of times, as our results are based in asymptotics: they hold when the sample size goes to infinity.
hisy(ttests)
hist(ttests)
hist(ttests) # 1000 experiments (Monte Carlo Simulations) using our function generator() with a sample size of 10.
qqplot(ttests)
abline(0,1)
qqplot(ttests)
abline(0,1)
hist(ttests) # 1000 experiments (Monte Carlo Simulations) using our function generator() with a sample size of 10.
ttests
str(ttests)
qqnorm(ttests)
abline(0,1)
ttest <- replicate(1000 , generator(3))
qqnorm(ttests)
qqnorm(ttest)
abline(0,1)
ps(seq(0,0.999)+0.05)
ps <- seq(0,0.999)+0.05
ps <- seq(0,0.999)+0.05
qqplot(qt(ps, 2*3-2),
ttests,
xlim=c(-6,6),
ylim=c(-6,6))
qqplot(qt(ps, 2*3-2),
ttest,
xlim=c(-6,6),
ylim=c(-6,6))
ps <- seq(0,0.999)+0.005
qqplot(qt(ps, 2*3-2),
ttest,
xlim=c(-6,6),
ylim=c(-6,6))
ps <- (seq(0,0999)+0.5)/1000
qqplot(qt(ps, 2*3-2),
ttest,
xlim=c(-6,6),
ylim=c(-6,6))
abline(0,1)
qqnorm(controlPopulation)
qqnorm(controlPopulation)
qqline(controlPopulation)
controls <- rnorm(5000, mean=24, sd=3.5)
diff <- mean(cases) - mean(controls)
se <- sqrt(var(cases)-var(controls))
tstat <- diff/se
generator <- function(n){
cases <- rnorm(n, mean=24, sd=3.5)
controls <- rnorm(n, mean=24, sd=3.5)
diff <- mean(cases) - mean(controls)
se <- sqrt(var(cases)-var(controls))
tstat <- diff/se
return(tstat)
}
generator(10)
ttests.random <- replicate(1000, generator(10))
generator <- function(n){
cases <- rnorm(n, mean=24, sd=3.5)
controls <- rnorm(n, mean=24, sd=3.5)
diff <- mean(cases) - mean(controls)
se <- sqrt(var(cases)-var(controls))
tstat <- diff/se
return(tstat)
}
generator(10)
generator <- function(n, mean=24, sd=3.5){
cases <- rnorm(n, mean, sd)
controls <- rnorm(n, mean, sd)
diff <- mean(cases) - mean(controls)
se <- sqrt(var(cases)-var(controls))
tstat <- diff/se
return(tstat)
}
generator(10)
ttests.random <- replicate(1000, generator(10))
warnings
warnings()
generator <- function(n, mean=24, sd=3.5){
cases <- rnorm(n, mean, sd)
controls <- rnorm(n, mean, sd)
diff <- mean(cases) - mean(controls)
se <- sqrt(var(cases) + var(controls))
tstat <- diff/se
return(tstat)
}
generator(10)
ttests.random <- replicate(1000, generator(10))
hist(ttests.random)
tstat <- sqrt(n)*mean(sample)/sd(sample)
n <- 5
sample <- rnorm(n)
tstat <- sqrt(n)*mean(sample)/sd(sample)
tstat
set.seed(1)
n <- 5
sample <- rnorm(n)
tstat <- sqrt(n)*mean(sample)/sd(sample)
tstat
pnorm(tstat)
1-pnorm(tstat)
tstat <- sqrt(n)*mean(sample)/sd(sample)
generator <- function(n=5){
sample <- rnorm(5)
tstat <- sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
ttests <- replicate(B, generator())
B <- 1000
ttests <- replicate(B, generator())
mean(ttests>2)
1-pt(2,df=4)
ttests <- replicate(B, generator())
mean(ttests>2)
1-pt(2,df=4)
# Exercise 3
1-pt(2,df=4)
?"="
ps <- seq(1/(B+1), 1-1/(B+1), len+B)
ps <- seq(1/(B+1), 1-1/(B+1), len=B)
ps
ps <- seq(1/(B+1), 1-1/(B+1), len=b)
ps
b <- 100
ps <- seq(1/(B+1), 1-1/(B+1), len=b)
ps
B+1
1/(B+1)
ps <- seq(1/(B+1), 1-1/(B+1), len=b)
qs <- qt(ps, df=4)
Ns <- seq(5,30,5)
quantiles <-sapply(Ns, function(n)
ttests <- replicate(100, generator(n))
)
par(mfrow=c(3,2))
quantiles <-sapply(Ns, function(n){
ttests <- replicate(100, generator(n))
)}
quantiles <-sapply(Ns, function(n){
}
par(mfrow=c(3,2))
par(mfrow=c(3,2))
for (i in 1:6){
qqplot(qs, quantiles[,i])
}
for (i in 1:6){
qqplot(qs, quantiles[,i])
abline(0,1)
}
par(mfrow=c(3,2))
for (i in 1:6){
qqplot(qs,
quantiles[,i],
xlab = "Theoretical t-dist quantiles",
ylab = " Monte Carlo t-dist. quantiles")
abline(0,1)
}
par(mfrow=c(3,2))
for (i in 1:6){
qqplot(qs,
quantiles[,i],
xlab = "Theoretical t-dist quantiles",
ylab = " Monte Carlo t-dist. quantiles")
abline(0,1)
}
for (i in 1:6){
qqplot(qs,
quantiles[,i],
xlab = "Theoretical t-dist quantiles",
ylab = " Monte Carlo t-dist. quantiles",
main=expression(paste("sample size =", Ns[i])))
abline(0,1)
}
NS
Ns
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal)
}
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal)
}
generator4(10)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
}
generator4(10)
tstat
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
generator4(10)
ps <- seq(0,999)+0.05 /1000
ps4 <- seq(0,999)+0.05 /1000
ps4
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
qs <- qt(ps, df=)
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
Ns <- seq(5,30,5)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
Ns <- seq(5,30,5)
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
quantiles <-sapply(Ns, function(n){
ttests <- replicate(100, generator(n))})
qs <- sapply(Ns, function(N){
qt(ps, df=2*N-2)
}
)
View(qs)
quantiles <- sapply(Ns, generator4())
generator4 <- function(N, mean = 0, sd = 1){
sample1 <- rnorm(N, mean, sd)
sample2 <- rnorm(N, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
quantiles <- sapply(Ns, generator4())
quantiles <- sapply(Ns, function(N){
generator4(N)
}
)
quantiles <- sapply(Ns, function(N){
generator4(N)
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
quantiles
qs <- sapply(Ns, function(N){
ttests <- replicate(100, qt(ps, df=2*N-2))
})
ttests <- replicate(100,generator4(N))
quantiles <- sapply(Ns, function(N){
ttests <- replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
qs <- sapply(Ns, function(N){
qt(ps, df=2*N-2)
})
par(mfrow= c(3,2))
for(j in 1:6){
qqplot(qs[,j], quantiles[,j])
}
View(quantiles)
quantiles <- sapply(Ns, function(N){
ttests <- replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
quantiles <- sapply(Ns, function(N){
replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
View(quantiles)
generator4(10)
generator4(10)
generator4(10)
generator4(10)
generator4(10)
generator4(10)
generator4(10)
generator4(10)
# We have to obtain t-statistics for two means, and then compare. We have to obtain them from standard normalyy distributed data. we have to use t.test() function
set.seed(1)
generator4 <- function(N, mean = 0, sd = 1){
sample1 <- rnorm(N, mean, sd)
sample2 <- rnorm(N, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
Ns <- seq(5,30,5)
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
qs <- sapply(Ns, function(N){
qt(ps, df=2*N-2)
})
quantiles <- sapply(Ns, function(N){
replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
par(mfrow= c(3,2))
for(j in 1:6){
qqplot(qs[,j], quantiles[,j])
}
generator4(10)
generator4(10)
generator4(10)
generator4(10)
sample1 <- rnorm(N, mean, sd)
generator4(5)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
generator4(5)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
rnorm(5, 0, 1)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)
return(tstat)
}
generator4(9)
sample1 <- rnorm(5, mean, sd)
sample1 <- rnorm(5, 0, 1)
sample2 <- rnorm(5, 0, 1)
t.test(sample1, sample2, var.equal=TRUE)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)$t.val
return(tstat)
}
generator4(10)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal=TRUE)$t.val
return(tstat)
}
tsat <- t.test(sample1, sample2)$t.val
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2)$t.val
return(tstat)
}
generator4(15)
generator4(15)
generator4(15)
generator4(5)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)$t.val
return(tsat)
}
quantiles <- sapply(Ns, function(N){
replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
par(mfrow= c(3,2))
for(j in 1:6){
qqplot(qs[,j], quantiles[,j])
}
generator4(10)
generator4(10)
generator4(10)
tsat <- t.test(sample1, sample2, var.equal = TRUE)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)
return(tsat)
}
generator4(10)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)$t
return(tsat)
}
generator4(10)
?t.test
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)$statistic
return(tsat)
}
generator4(10)
generator4(10)
generator4(10)
generator4(10)
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)$statistic
return(tsat)
}
generator4 <- function(n, mean = 0, sd = 1){
sample1 <- rnorm(n, mean, sd)
sample2 <- rnorm(n, mean, sd)
tsat <- t.test(sample1, sample2, var.equal = TRUE)$statistic
return(tsat)
}
Ns <- seq(5,30,5)
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=b)
qs <- sapply(Ns, function(N){
qt(ps, df=2*N-2)
})
quantiles <- sapply(Ns, function(N){
replicate(100,generator4(N))
}) # Here we obtain our experimental quantiles, or t-values, for each sample size
par(mfrow= c(3,2))
for(j in 1:6){
qqplot(qs[,j], quantiles[,j])
}
for(j in 1:6){
qqplot(qs[,j], quantiles[,j])
abline(0,1)
}
for(j in 1:6){
qqplot(qs[,j],
quantiles[,j],
xlab = "Theoretical t-dist quantiles",
ylab = " Monte Carlo t-dist. quantiles")
abline(0,1)
}
sample <- sample(c(-1,1),n,replace=TRUE)
generator5 <- function(n=15){
sample <- sample(c(-1,1),n,replace=TRUE)
}
generator5 <- function(n=15){
sample <- sample(c(-1,1),n,replace=TRUE)
tstat <-sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
ps <- seq(1/(b+1), 1-1/(b+1), len=100 )
qs <- qt(ps, df=14)# Theoretical t-dist quantiles with 14 degrees of freedom
ttests <- replicate(100, generator5())
qqplot(qs, ttests)
dev.off()
qqplot(qs, ttests)
abline(0,1)
l
l
ttests <- replicate(100, generator5())
dev.off()
qqplot(qs, ttests)
abline(0,1)
tstat <- sqrt(n)*mean(sample)/sd(sample)
tstat <- sqrt(n)*mean(sample)/sd(sample)
generator6 <- function(n=1000){
sample  <- sample (c(-1,1), n, replace=TRUE)
tstat <- sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
-
generator5 <- function(n){
sample <- sample(c(-1,1),n,replace=TRUE)
tstat <-sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
generator5 <- function(n){
sample <- sample(c(-1,1),n,replace=TRUE)
tstat <- sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
#Now we have to build our theoretical quantiles vector as before.
b <- 100
ps <- seq(1/(b+1), 1-1/(b+1), len=100 )#probabilities, percentiles.
qs <- qt(ps, df=14)# Theoretical t-dist quantiles with 14 degrees of freedom
ttests <- replicate(100, generator5(15))
dev.off()
qqplot(qs, ttests)
abline(0,1)
generator6 <- function(n=1000){
sample  <- sample (c(-1,1), n, replace=TRUE)
tstat <- sqrt(n)*mean(sample)/sd(sample)
return(tstat)
}
quantiles <- replicate(100, generator5(1000))
qs <- qt(ps, df=999)
quantiles <- replicate(100, generator5(1000))
qqplot(qs,quantiles)
abline(0,1)
}
?qqnorm
# Now we will check if this approximation remains for big sample sizes, such as 1000
ps <- seq(1/(b+1), 1-1/(b+1), len=10000 )#probabilities, percentiles.
qs <- qt(ps, df=999)
quantiles <- replicate(10000, generator5(1000))
qqplot(qs,quantiles)
abline(0,1)
# Now we will check if this approximation remains for big sample sizes, such as 1000
ps <- seq(1/(b+1), 1-1/(b+1), len=1000 )#probabilities, percentiles.
qs <- qt(ps, df=999)
quantiles <- replicate(1000, generator5(1000))
qqplot(qs,quantiles)
abline(0,1)
set.seed(1)
Ns <- seq(5,45,5)
par(mfrow=c(3,3))
for(N in Ns){
medians <- replicate(10000, median ( rnorm(N) ) )
title <- paste("N=",N,", avg=",round( mean(medians), 2) , ", sd*sqrt(N)=", round( sd(medians)*sqrt(N),2) )
qqnorm(medians, main = title )
qqline(medians)
}
}
