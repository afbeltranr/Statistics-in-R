interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <-
mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
mypar()
mypar()
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
Q <- qnorm(1- 0.05/2)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
1- 0.05/2
mypar()
plot(mean(chowPopulation) + c(-7,7), c(1,1), type="n",
xlab="weight", ylab="interval", ylim=c(1,B))
mypar()
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
Q <- qnorm(1- 0.05/2)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
mypar()
mypar()
plot(mean(chowPopulation) + c(-7,7), c(1,1), type="n",
xlab="weight", ylab="interval", ylim=c(1,B))
abline(v=mean(chowPopulation))
##Q <- qnorm(1- 0.05/2) ##no longer normal so use:
Q <- qt(1- 0.05/2, df=4)
##Q <- qnorm(1- 0.05/2) ##no longer normal so use:
Q <- qt(1- 0.05/2, df=4)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation, N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se )
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
Q <- qnorm(1-0.05/2)
babies <- read.table("babies.txt", header=TRUE)
library(dplyr)
library(rafalib)
bwt.nonsmoke <- filter(babies, smoke ==0) %>%select(bwt) %>% unlist
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke ==0) %>%select(bwt) %>% unlist
bwt.smoke <- filter(babies ,smoke ==1)  %>% select(bwt) %>% unlist
mean(bwt.nonsmoke) - mean(bwt.smoke)
N <- 25
dat.s <- sample(bwt.smoke, N)
set.seed(1)
dat.ns <- sample(bwt.nonsmoke, N)
dat.s <- sample(bwt.smoke, N)
Q <- qt(0.99, df=2*N-2)
se <- sqrt(var(dat.ns)/N + var(dat.s)/N)
Q <- qt(0.99, df=2*N-2)
q*se
Q*se
Q <- qt(0.99, 2*N-2)
Q*se
Q <- qt(1- 0.01/2, 2*N-2)
Q <- qt(1- 0.01/2, 2*N-2)
Q*se
17100-364
set.seed(1)
chowPopulation <- read.csv("femaleControlsPopulation.csv") %>% unlist
mu_chow <- mean(chowPopulation)
print(mu_chow)
N <- 30
chow <- sample(chowPopulation, N)
print(mean(chow))
se <- sd(chow)/sqrt(N)
Q <- qnorm(1-0.05/2)
library(rafalib)
B <- 250
mypar()
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <-
mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
lines(interval, c(i,i),col=color)
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <-
mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
mypar()
plot(mean(chowPopulation)+c(-7,7),c(1,1),type="n",
xlab="weight",ylab="interval",ylim=c(1,B))
abline(v=mean(chowPopulation))
Q <- qnorm(1- 0.05/2)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
mypar()
plot(mean(chowPopulation) + c(-7,7), c(1,1), type="n",
xlab="weight", ylab="interval", ylim=c(1,B))
abline(v=mean(chowPopulation))
##Q <- qnorm(1- 0.05/2) ##no longer normal so use:
Q <- qt(1- 0.05/2, df=4)
N <- 5
for (i in 1:B) {
chow <- sample(chowPopulation, N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se, mean(chow)+Q*se )
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval, c(i,i),col=color)
}
?devtools
install.packages(c("backports", "ellipsis", "git2r", "glue", "maptools", "openxlsx", "pillar", "pkgbuild", "ps", "rematch2", "rlang", "scales", "spatstat", "tidyselect", "vctrs"))
help(devtools)
help("devtools"")
help("devtools"")
""
help("devtools")
library(devtools)
help("devtools")
help(package="devtools")
?aes
install.packages("KernSmooth")
library(KernSmooth)
set.seed(1)
set.seed(1)
set.seed(1)
dat.ns1 <- sample(bwt.nonsmoke, 5)
dat.ns2 <- sample(bwt.smoke, 5)
dat.s1 <- sample(bwt.smoke, 5)
t <- t.test(dat.ns1, dat.s1)
t
pval <- pt(1-t/2, 2*5-2)
t <- t.test(dat.ns1, dat.s1)
tstat <- 1.8554
pval <- pt(1-tstat/2, 2*5-2)
pval
tstat <- 1.8554
pval <- pt(1-tstat, 2*5-2)
pval
library(dplyr)
library(dplyr)
dat <- read.csv("mice_pheno.csv")
View(dat)
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight)
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "hf") %>% select(Bodyweight) %>% unlist
dat <- read.csv("mice_pheno.csv")
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "hf") %>% select(Bodyweight) %>% unlist
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print (mu_hf - mu_control)
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print (mu_hf - mu_control)
print (mu_hf - mu_control) /mu_control *100
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
print (mu_hf - mu_control)
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
N <- 5
control <- sample(controlPopulation, N)
hf <- sample(hfPopulation, N)
control <- sample(controlPopulation, N)
t.test(hf,control)$pvalue
t.test(hf,control)$p.value
set.seed(1)
N <- 5
hf <- sample(hfPopulation, N)
control <- sample(controlPopulation, N)
t.test(hf,control)$p.value
set.seed(1)
N <- 5
hf <- sample(hfPopulation, N)
control <- sample(controlPopulation, N)
t.test(hf,control)$p.value
set.seed(1)
N <- 5
hf <- sample(hfPopulation, N)
control <- sample(controlPopulation, N)
t.test(hf,control)$p.value
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
N <- 12
N <- 12
alpha <- 0.05
b <- 2000
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
reject(12)
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
rejections <- replicate(B,reject(N))
mean(rejections)
rejections <- replicate(B,reject(N))
mean(rejections)
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
Ns <- seq(5, 50, 5)
power <- sapply(Ns,function(N){
rejections <- replicate(B, reject(N))
mean(rejections)
})
plot(Ns, power, type="b")
plot(Ns, power, type="b")
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha=0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
N <- 30
alphas <- c(0.1,0.05,0.01,0.001,0.0001)
power <- sapply(alphas,function(alpha){
rejections <- replicate(B,reject(N,alpha=alpha))
mean(rejections)
})
plot(alphas, power, xlab="alpha", type="b", log="x")
pvalue < alpha
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
library(dplyr)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
library(rafalib)
mean(bwt.nonsmoke)-mean(bwt.smoke)
popsd(bwt.nonsmoke)
popsd(bwt.smoke)
set.seed(1)
alpha <- 0.05
dat.ns <- sample(bwt.nonsmoke, 5)
dat.s <- sample(bwt.smoke, 5)
pvalue  <-  t.test(dat.ns, dat.s)$p.value
pvalue < alpha
reject <- function(N, alpha=0.05){
dat.ns <- sample(bwt.nonsmoke, N)
dat.s <- sample(bwt.smoke, N)
pval <- t.test(dat.ns, dat.s)$p.value
pval < alpha
}
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
# ___ Exercise 2 ------------
set.seed(1) # reproducible random numbers generation
reject <- function(N, alpha=0.05){
dat.ns <- sample(bwt.nonsmoke, N)
dat.s <- sample(bwt.smoke, N)
pval <- t.test(dat.ns, dat.s)$p.value
pval < alpha
}
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
N <-5
dat.ns <- sample(bwt.nonsmoke, 5)
dat.s <- sample(bwt.smoke, 5)
pvalue  <-  t.test(dat.ns, dat.s)$p.value
pvalue < alpha
# ___ Exercise 2 ------------
set.seed(1) # reproducible random numbers generation
reject <- function(N, alpha=0.05){
dat.ns <- sample(bwt.nonsmoke, N)
dat.s <- sample(bwt.smoke, N)
pval <- t.test(dat.ns, dat.s)$p.value
pval < alpha
}
reject(12)
B <- 10000
reject(12)
B <- 10000
rejections <- replicate(B,reject(5))
power.babies <- mean(rejections)
power.babies
rejections <- replicate(B,reject(5))
power.babies <- mean(rejections)
power.babies
Ns <- c (5,30,60,90,120)
powers <- sapply(Ns, function(N){
rejections <- replicate(B, reject(N))
mean(rejections)
})
powers
#now we set alpha at 0.01
powers <- sapply(Ns, function(N, alpha){
rejections <- replicate(B, reject(N, alpha=0.01))
mean(rejections)
})
#now we set alpha at 0.01
powers2 <- sapply(Ns, function(N, alpha){
rejections <- replicate(B, reject(N, alpha=0.01))
mean(rejections)
})
powers <- sapply(Ns, function(N){
rejections <- replicate(B, reject(N))
mean(rejections)
})
#now we set alpha at 0.01
powers2 <- sapply(Ns, function(N, alpha){
rejections <- replicate(B, reject(N, alpha=0.01))
mean(rejections)
})
powers2
library(dplyr)
dat <- read.csv("mice_pheno.csv")
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
View(dat)
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "hf") %>% select(Bodyweight) %>% unlist
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print (mu_hf - mu_control)
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
tstat <- t.test(hf,control)
tstat
print (mu_hf - mu_control)
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
tstat
hf
control
library(dplyr)
dat <- read.csv("mice_pheno.csv")
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "hf") %>% select(Bodyweight) %>% unlist
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print (mu_hf - mu_control)
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
stat
tstat
N <- 12
B <- 2000
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
reject(12)
reject(12)
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
reject(12)
rejections <- replicate(B,reject(N))
rejections
mean(rejections)
# varying sample size
Ns <- seq(5, 50, 5)
library(dplyr)
dat <- read.csv("mice_pheno.csv")
View(dat)
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
View(controlPopulation)
controlPopulation <- filter(dat, Sex== "F" & Diet== "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat, Sex== "F" & Diet== "hf") %>% select(Bodyweight) %>% unlist
mu_hf<- mean(hfPopulation)
mu_control <- mean(controlPopulation)
print (mu_hf - mu_control)
print (mu_hf - mu_control) /mu_control *100 # difference in relative percent
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
tstat
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
tstat <- t.test(hf,control)
t.test(hf,control)$p.value
